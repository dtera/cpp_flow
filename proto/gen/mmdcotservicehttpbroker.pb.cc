// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmdcotservicehttpbroker.proto

#include "mmdcotservicehttpbroker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace otServicePB {
constexpr Response::Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0u)
  , reqtimemillis_(0){}
struct ResponseDefaultTypeInternal {
  constexpr ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;
constexpr OTServiceData::OTServiceData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OTServiceDataDefaultTypeInternal {
  constexpr OTServiceDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTServiceDataDefaultTypeInternal() {}
  union {
    OTServiceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTServiceDataDefaultTypeInternal _OTServiceData_default_instance_;
constexpr OTServerRequest::OTServerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_()
  , function_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sessiontoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , k_(0u){}
struct OTServerRequestDefaultTypeInternal {
  constexpr OTServerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTServerRequestDefaultTypeInternal() {}
  union {
    OTServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTServerRequestDefaultTypeInternal _OTServerRequest_default_instance_;
constexpr OTServerResponse::OTServerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , function_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OTServerResponseDefaultTypeInternal {
  constexpr OTServerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTServerResponseDefaultTypeInternal() {}
  union {
    OTServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTServerResponseDefaultTypeInternal _OTServerResponse_default_instance_;
constexpr OTClientRequest_UinWithLabelMapEntry_DoNotUse::OTClientRequest_UinWithLabelMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct OTClientRequest_UinWithLabelMapEntry_DoNotUseDefaultTypeInternal {
  constexpr OTClientRequest_UinWithLabelMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTClientRequest_UinWithLabelMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    OTClientRequest_UinWithLabelMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTClientRequest_UinWithLabelMapEntry_DoNotUseDefaultTypeInternal _OTClientRequest_UinWithLabelMapEntry_DoNotUse_default_instance_;
constexpr OTClientRequest::OTClientRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uinwithlabelmap_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , function_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OTClientRequestDefaultTypeInternal {
  constexpr OTClientRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTClientRequestDefaultTypeInternal() {}
  union {
    OTClientRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTClientRequestDefaultTypeInternal _OTClientRequest_default_instance_;
constexpr OTClientResult_ResMapEntry_DoNotUse::OTClientResult_ResMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct OTClientResult_ResMapEntry_DoNotUseDefaultTypeInternal {
  constexpr OTClientResult_ResMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTClientResult_ResMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    OTClientResult_ResMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTClientResult_ResMapEntry_DoNotUseDefaultTypeInternal _OTClientResult_ResMapEntry_DoNotUse_default_instance_;
constexpr OTClientResult::OTClientResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resmap_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct OTClientResultDefaultTypeInternal {
  constexpr OTClientResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTClientResultDefaultTypeInternal() {}
  union {
    OTClientResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTClientResultDefaultTypeInternal _OTClientResult_default_instance_;
constexpr OTClientResponse::OTClientResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_()
  , function_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OTClientResponseDefaultTypeInternal {
  constexpr OTClientResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTClientResponseDefaultTypeInternal() {}
  union {
    OTClientResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTClientResponseDefaultTypeInternal _OTClientResponse_default_instance_;
}  // namespace otServicePB
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mmdcotservicehttpbroker_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mmdcotservicehttpbroker_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mmdcotservicehttpbroker_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mmdcotservicehttpbroker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::otServicePB::Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::otServicePB::Response, code_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::Response, message_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::Response, reqtimemillis_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::Response, data_),
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTServiceData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTServiceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTServiceData, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTServerRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTServerRequest, function_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTServerRequest, sessiontoken_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTServerRequest, k_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTServerRequest, params_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTServerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTServerResponse, function_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTServerResponse, values_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientRequest_UinWithLabelMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientRequest_UinWithLabelMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientRequest_UinWithLabelMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientRequest_UinWithLabelMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientRequest, function_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientRequest, uinwithlabelmap_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientResult_ResMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientResult_ResMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientResult_ResMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientResult_ResMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientResult, resmap_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientResponse, function_),
  PROTOBUF_FIELD_OFFSET(::otServicePB::OTClientResponse, result_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::otServicePB::Response)},
  { 13, 19, sizeof(::otServicePB::OTServiceData)},
  { 20, 29, sizeof(::otServicePB::OTServerRequest)},
  { 33, 40, sizeof(::otServicePB::OTServerResponse)},
  { 42, 49, sizeof(::otServicePB::OTClientRequest_UinWithLabelMapEntry_DoNotUse)},
  { 51, 58, sizeof(::otServicePB::OTClientRequest)},
  { 60, 67, sizeof(::otServicePB::OTClientResult_ResMapEntry_DoNotUse)},
  { 69, -1, sizeof(::otServicePB::OTClientResult)},
  { 75, 82, sizeof(::otServicePB::OTClientResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::otServicePB::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::otServicePB::_OTServiceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::otServicePB::_OTServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::otServicePB::_OTServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::otServicePB::_OTClientRequest_UinWithLabelMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::otServicePB::_OTClientRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::otServicePB::_OTClientResult_ResMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::otServicePB::_OTClientResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::otServicePB::_OTClientResponse_default_instance_),
};

const char descriptor_table_protodef_mmdcotservicehttpbroker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035mmdcotservicehttpbroker.proto\022\013otServi"
  "cePB\"\222\001\n\010Response\022\021\n\004code\030\001 \001(\rH\000\210\001\001\022\024\n\007"
  "message\030\002 \001(\tH\001\210\001\001\022\032\n\rreqTimeMillis\030\003 \001("
  "\002H\002\210\001\001\022\021\n\004data\030\004 \001(\tH\003\210\001\001B\007\n\005_codeB\n\n\010_m"
  "essageB\020\n\016_reqTimeMillisB\007\n\005_data\"-\n\rOTS"
  "erviceData\022\022\n\005value\030\001 \001(\tH\000\210\001\001B\010\n\006_value"
  "\"\207\001\n\017OTServerRequest\022\025\n\010function\030\001 \001(\tH\000"
  "\210\001\001\022\031\n\014sessionToken\030\002 \001(\tH\001\210\001\001\022\016\n\001k\030\003 \001("
  "\rH\002\210\001\001\022\016\n\006params\030\004 \003(\tB\013\n\t_functionB\017\n\r_"
  "sessionTokenB\004\n\002_k\"F\n\020OTServerResponse\022\025"
  "\n\010function\030\001 \001(\tH\000\210\001\001\022\016\n\006values\030\002 \003(\tB\013\n"
  "\t_function\"\271\001\n\017OTClientRequest\022\025\n\010functi"
  "on\030\001 \001(\tH\000\210\001\001\022J\n\017uinWithLabelMap\030\002 \003(\01321"
  ".otServicePB.OTClientRequest.UinWithLabe"
  "lMapEntry\0326\n\024UinWithLabelMapEntry\022\013\n\003key"
  "\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001B\013\n\t_function\"x"
  "\n\016OTClientResult\0227\n\006resMap\030\001 \003(\0132\'.otSer"
  "vicePB.OTClientResult.ResMapEntry\032-\n\013Res"
  "MapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
  "\"c\n\020OTClientResponse\022\025\n\010function\030\001 \001(\tH\000"
  "\210\001\001\022+\n\006result\030\002 \003(\0132\033.otServicePB.OTClie"
  "ntResultB\013\n\t_functionb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mmdcotservicehttpbroker_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mmdcotservicehttpbroker_2eproto = {
  false, false, 869, descriptor_table_protodef_mmdcotservicehttpbroker_2eproto, "mmdcotservicehttpbroker.proto", 
  &descriptor_table_mmdcotservicehttpbroker_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_mmdcotservicehttpbroker_2eproto::offsets,
  file_level_metadata_mmdcotservicehttpbroker_2eproto, file_level_enum_descriptors_mmdcotservicehttpbroker_2eproto, file_level_service_descriptors_mmdcotservicehttpbroker_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mmdcotservicehttpbroker_2eproto_getter() {
  return &descriptor_table_mmdcotservicehttpbroker_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mmdcotservicehttpbroker_2eproto(&descriptor_table_mmdcotservicehttpbroker_2eproto);
namespace otServicePB {

// ===================================================================

class Response::_Internal {
 public:
  using HasBits = decltype(std::declval<Response>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reqtimemillis(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:otServicePB.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&reqtimemillis_) -
    reinterpret_cast<char*>(&code_)) + sizeof(reqtimemillis_));
  // @@protoc_insertion_point(copy_constructor:otServicePB.Response)
}

inline void Response::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reqtimemillis_) -
    reinterpret_cast<char*>(&code_)) + sizeof(reqtimemillis_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:otServicePB.Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:otServicePB.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reqtimemillis_) -
        reinterpret_cast<char*>(&code_)) + sizeof(reqtimemillis_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "otServicePB.Response.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float reqTimeMillis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_reqtimemillis(&has_bits);
          reqtimemillis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "otServicePB.Response.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:otServicePB.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 code = 1;
  if (_internal_has_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // optional string message = 2;
  if (_internal_has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "otServicePB.Response.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional float reqTimeMillis = 3;
  if (_internal_has_reqtimemillis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_reqtimemillis(), target);
  }

  // optional string data = 4;
  if (_internal_has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "otServicePB.Response.data");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:otServicePB.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:otServicePB.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data());
    }

    // optional uint32 code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_code());
    }

    // optional float reqTimeMillis = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }

void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Response *>(to)->MergeFrom(
      static_cast<const Response &>(from));
}


void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:otServicePB.Response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000008u) {
      reqtimemillis_ = from.reqtimemillis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:otServicePB.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, reqtimemillis_)
      + sizeof(Response::reqtimemillis_)
      - PROTOBUF_FIELD_OFFSET(Response, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mmdcotservicehttpbroker_2eproto_getter, &descriptor_table_mmdcotservicehttpbroker_2eproto_once,
      file_level_metadata_mmdcotservicehttpbroker_2eproto[0]);
}

// ===================================================================

class OTServiceData::_Internal {
 public:
  using HasBits = decltype(std::declval<OTServiceData>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OTServiceData::OTServiceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:otServicePB.OTServiceData)
}
OTServiceData::OTServiceData(const OTServiceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:otServicePB.OTServiceData)
}

inline void OTServiceData::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OTServiceData::~OTServiceData() {
  // @@protoc_insertion_point(destructor:otServicePB.OTServiceData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OTServiceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OTServiceData::ArenaDtor(void* object) {
  OTServiceData* _this = reinterpret_cast< OTServiceData* >(object);
  (void)_this;
}
void OTServiceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OTServiceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OTServiceData::Clear() {
// @@protoc_insertion_point(message_clear_start:otServicePB.OTServiceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OTServiceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "otServicePB.OTServiceData.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OTServiceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:otServicePB.OTServiceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string value = 1;
  if (_internal_has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "otServicePB.OTServiceData.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:otServicePB.OTServiceData)
  return target;
}

size_t OTServiceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:otServicePB.OTServiceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OTServiceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OTServiceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OTServiceData::GetClassData() const { return &_class_data_; }

void OTServiceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OTServiceData *>(to)->MergeFrom(
      static_cast<const OTServiceData &>(from));
}


void OTServiceData::MergeFrom(const OTServiceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:otServicePB.OTServiceData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OTServiceData::CopyFrom(const OTServiceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:otServicePB.OTServiceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OTServiceData::IsInitialized() const {
  return true;
}

void OTServiceData::InternalSwap(OTServiceData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OTServiceData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mmdcotservicehttpbroker_2eproto_getter, &descriptor_table_mmdcotservicehttpbroker_2eproto_once,
      file_level_metadata_mmdcotservicehttpbroker_2eproto[1]);
}

// ===================================================================

class OTServerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<OTServerRequest>()._has_bits_);
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sessiontoken(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_k(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

OTServerRequest::OTServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:otServicePB.OTServerRequest)
}
OTServerRequest::OTServerRequest(const OTServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_function()) {
    function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function(), 
      GetArenaForAllocation());
  }
  sessiontoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sessiontoken()) {
    sessiontoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessiontoken(), 
      GetArenaForAllocation());
  }
  k_ = from.k_;
  // @@protoc_insertion_point(copy_constructor:otServicePB.OTServerRequest)
}

inline void OTServerRequest::SharedCtor() {
function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sessiontoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
k_ = 0u;
}

OTServerRequest::~OTServerRequest() {
  // @@protoc_insertion_point(destructor:otServicePB.OTServerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OTServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessiontoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OTServerRequest::ArenaDtor(void* object) {
  OTServerRequest* _this = reinterpret_cast< OTServerRequest* >(object);
  (void)_this;
}
void OTServerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OTServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OTServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:otServicePB.OTServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      function_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sessiontoken_.ClearNonDefaultToEmpty();
    }
  }
  k_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OTServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_function();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "otServicePB.OTServerRequest.function"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sessionToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sessiontoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "otServicePB.OTServerRequest.sessionToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_k(&has_bits);
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_params();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "otServicePB.OTServerRequest.params"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OTServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:otServicePB.OTServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string function = 1;
  if (_internal_has_function()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function().data(), static_cast<int>(this->_internal_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "otServicePB.OTServerRequest.function");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function(), target);
  }

  // optional string sessionToken = 2;
  if (_internal_has_sessiontoken()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessiontoken().data(), static_cast<int>(this->_internal_sessiontoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "otServicePB.OTServerRequest.sessionToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sessiontoken(), target);
  }

  // optional uint32 k = 3;
  if (_internal_has_k()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_k(), target);
  }

  // repeated string params = 4;
  for (int i = 0, n = this->_internal_params_size(); i < n; i++) {
    const auto& s = this->_internal_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "otServicePB.OTServerRequest.params");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:otServicePB.OTServerRequest)
  return target;
}

size_t OTServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:otServicePB.OTServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string params = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(params_.size());
  for (int i = 0, n = params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      params_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string function = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_function());
    }

    // optional string sessionToken = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sessiontoken());
    }

    // optional uint32 k = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_k());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OTServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OTServerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OTServerRequest::GetClassData() const { return &_class_data_; }

void OTServerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OTServerRequest *>(to)->MergeFrom(
      static_cast<const OTServerRequest &>(from));
}


void OTServerRequest::MergeFrom(const OTServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:otServicePB.OTServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_function(from._internal_function());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sessiontoken(from._internal_sessiontoken());
    }
    if (cached_has_bits & 0x00000004u) {
      k_ = from.k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OTServerRequest::CopyFrom(const OTServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:otServicePB.OTServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OTServerRequest::IsInitialized() const {
  return true;
}

void OTServerRequest::InternalSwap(OTServerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  params_.InternalSwap(&other->params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_, GetArenaForAllocation(),
      &other->function_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sessiontoken_, GetArenaForAllocation(),
      &other->sessiontoken_, other->GetArenaForAllocation()
  );
  swap(k_, other->k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OTServerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mmdcotservicehttpbroker_2eproto_getter, &descriptor_table_mmdcotservicehttpbroker_2eproto_once,
      file_level_metadata_mmdcotservicehttpbroker_2eproto[2]);
}

// ===================================================================

class OTServerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<OTServerResponse>()._has_bits_);
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OTServerResponse::OTServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:otServicePB.OTServerResponse)
}
OTServerResponse::OTServerResponse(const OTServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_function()) {
    function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:otServicePB.OTServerResponse)
}

inline void OTServerResponse::SharedCtor() {
function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OTServerResponse::~OTServerResponse() {
  // @@protoc_insertion_point(destructor:otServicePB.OTServerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OTServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OTServerResponse::ArenaDtor(void* object) {
  OTServerResponse* _this = reinterpret_cast< OTServerResponse* >(object);
  (void)_this;
}
void OTServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OTServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OTServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:otServicePB.OTServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    function_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OTServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_function();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "otServicePB.OTServerResponse.function"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "otServicePB.OTServerResponse.values"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OTServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:otServicePB.OTServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string function = 1;
  if (_internal_has_function()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function().data(), static_cast<int>(this->_internal_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "otServicePB.OTServerResponse.function");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function(), target);
  }

  // repeated string values = 2;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "otServicePB.OTServerResponse.values");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:otServicePB.OTServerResponse)
  return target;
}

size_t OTServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:otServicePB.OTServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      values_.Get(i));
  }

  // optional string function = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OTServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OTServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OTServerResponse::GetClassData() const { return &_class_data_; }

void OTServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OTServerResponse *>(to)->MergeFrom(
      static_cast<const OTServerResponse &>(from));
}


void OTServerResponse::MergeFrom(const OTServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:otServicePB.OTServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_function()) {
    _internal_set_function(from._internal_function());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OTServerResponse::CopyFrom(const OTServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:otServicePB.OTServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OTServerResponse::IsInitialized() const {
  return true;
}

void OTServerResponse::InternalSwap(OTServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_, GetArenaForAllocation(),
      &other->function_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OTServerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mmdcotservicehttpbroker_2eproto_getter, &descriptor_table_mmdcotservicehttpbroker_2eproto_once,
      file_level_metadata_mmdcotservicehttpbroker_2eproto[3]);
}

// ===================================================================

OTClientRequest_UinWithLabelMapEntry_DoNotUse::OTClientRequest_UinWithLabelMapEntry_DoNotUse() {}
OTClientRequest_UinWithLabelMapEntry_DoNotUse::OTClientRequest_UinWithLabelMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OTClientRequest_UinWithLabelMapEntry_DoNotUse::MergeFrom(const OTClientRequest_UinWithLabelMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OTClientRequest_UinWithLabelMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mmdcotservicehttpbroker_2eproto_getter, &descriptor_table_mmdcotservicehttpbroker_2eproto_once,
      file_level_metadata_mmdcotservicehttpbroker_2eproto[4]);
}

// ===================================================================

class OTClientRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<OTClientRequest>()._has_bits_);
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OTClientRequest::OTClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uinwithlabelmap_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:otServicePB.OTClientRequest)
}
OTClientRequest::OTClientRequest(const OTClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uinwithlabelmap_.MergeFrom(from.uinwithlabelmap_);
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_function()) {
    function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:otServicePB.OTClientRequest)
}

inline void OTClientRequest::SharedCtor() {
function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OTClientRequest::~OTClientRequest() {
  // @@protoc_insertion_point(destructor:otServicePB.OTClientRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OTClientRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OTClientRequest::ArenaDtor(void* object) {
  OTClientRequest* _this = reinterpret_cast< OTClientRequest* >(object);
  (void)_this;
  _this->uinwithlabelmap_. ~MapField();
}
inline void OTClientRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &OTClientRequest::ArenaDtor);
  }
}
void OTClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OTClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:otServicePB.OTClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uinwithlabelmap_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    function_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OTClientRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_function();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "otServicePB.OTClientRequest.function"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> uinWithLabelMap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&uinwithlabelmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OTClientRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:otServicePB.OTClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string function = 1;
  if (_internal_has_function()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function().data(), static_cast<int>(this->_internal_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "otServicePB.OTClientRequest.function");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function(), target);
  }

  // map<uint32, uint32> uinWithLabelMap = 2;
  if (!this->_internal_uinwithlabelmap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_uinwithlabelmap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_uinwithlabelmap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_uinwithlabelmap().begin();
          it != this->_internal_uinwithlabelmap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OTClientRequest_UinWithLabelMapEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_uinwithlabelmap().begin();
          it != this->_internal_uinwithlabelmap().end(); ++it) {
        target = OTClientRequest_UinWithLabelMapEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:otServicePB.OTClientRequest)
  return target;
}

size_t OTClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:otServicePB.OTClientRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> uinWithLabelMap = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uinwithlabelmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_uinwithlabelmap().begin();
      it != this->_internal_uinwithlabelmap().end(); ++it) {
    total_size += OTClientRequest_UinWithLabelMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional string function = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OTClientRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OTClientRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OTClientRequest::GetClassData() const { return &_class_data_; }

void OTClientRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OTClientRequest *>(to)->MergeFrom(
      static_cast<const OTClientRequest &>(from));
}


void OTClientRequest::MergeFrom(const OTClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:otServicePB.OTClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uinwithlabelmap_.MergeFrom(from.uinwithlabelmap_);
  if (from._internal_has_function()) {
    _internal_set_function(from._internal_function());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OTClientRequest::CopyFrom(const OTClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:otServicePB.OTClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OTClientRequest::IsInitialized() const {
  return true;
}

void OTClientRequest::InternalSwap(OTClientRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uinwithlabelmap_.InternalSwap(&other->uinwithlabelmap_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_, GetArenaForAllocation(),
      &other->function_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OTClientRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mmdcotservicehttpbroker_2eproto_getter, &descriptor_table_mmdcotservicehttpbroker_2eproto_once,
      file_level_metadata_mmdcotservicehttpbroker_2eproto[5]);
}

// ===================================================================

OTClientResult_ResMapEntry_DoNotUse::OTClientResult_ResMapEntry_DoNotUse() {}
OTClientResult_ResMapEntry_DoNotUse::OTClientResult_ResMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OTClientResult_ResMapEntry_DoNotUse::MergeFrom(const OTClientResult_ResMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OTClientResult_ResMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mmdcotservicehttpbroker_2eproto_getter, &descriptor_table_mmdcotservicehttpbroker_2eproto_once,
      file_level_metadata_mmdcotservicehttpbroker_2eproto[6]);
}

// ===================================================================

class OTClientResult::_Internal {
 public:
};

OTClientResult::OTClientResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resmap_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:otServicePB.OTClientResult)
}
OTClientResult::OTClientResult(const OTClientResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resmap_.MergeFrom(from.resmap_);
  // @@protoc_insertion_point(copy_constructor:otServicePB.OTClientResult)
}

inline void OTClientResult::SharedCtor() {
}

OTClientResult::~OTClientResult() {
  // @@protoc_insertion_point(destructor:otServicePB.OTClientResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OTClientResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OTClientResult::ArenaDtor(void* object) {
  OTClientResult* _this = reinterpret_cast< OTClientResult* >(object);
  (void)_this;
  _this->resmap_. ~MapField();
}
inline void OTClientResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &OTClientResult::ArenaDtor);
  }
}
void OTClientResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OTClientResult::Clear() {
// @@protoc_insertion_point(message_clear_start:otServicePB.OTClientResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resmap_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OTClientResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> resMap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&resmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OTClientResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:otServicePB.OTClientResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> resMap = 1;
  if (!this->_internal_resmap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "otServicePB.OTClientResult.ResMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "otServicePB.OTClientResult.ResMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_resmap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_resmap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_resmap().begin();
          it != this->_internal_resmap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OTClientResult_ResMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_resmap().begin();
          it != this->_internal_resmap().end(); ++it) {
        target = OTClientResult_ResMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:otServicePB.OTClientResult)
  return target;
}

size_t OTClientResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:otServicePB.OTClientResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> resMap = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_resmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_resmap().begin();
      it != this->_internal_resmap().end(); ++it) {
    total_size += OTClientResult_ResMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OTClientResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OTClientResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OTClientResult::GetClassData() const { return &_class_data_; }

void OTClientResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OTClientResult *>(to)->MergeFrom(
      static_cast<const OTClientResult &>(from));
}


void OTClientResult::MergeFrom(const OTClientResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:otServicePB.OTClientResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resmap_.MergeFrom(from.resmap_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OTClientResult::CopyFrom(const OTClientResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:otServicePB.OTClientResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OTClientResult::IsInitialized() const {
  return true;
}

void OTClientResult::InternalSwap(OTClientResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resmap_.InternalSwap(&other->resmap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OTClientResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mmdcotservicehttpbroker_2eproto_getter, &descriptor_table_mmdcotservicehttpbroker_2eproto_once,
      file_level_metadata_mmdcotservicehttpbroker_2eproto[7]);
}

// ===================================================================

class OTClientResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<OTClientResponse>()._has_bits_);
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OTClientResponse::OTClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  result_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:otServicePB.OTClientResponse)
}
OTClientResponse::OTClientResponse(const OTClientResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_function()) {
    function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:otServicePB.OTClientResponse)
}

inline void OTClientResponse::SharedCtor() {
function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OTClientResponse::~OTClientResponse() {
  // @@protoc_insertion_point(destructor:otServicePB.OTClientResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OTClientResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OTClientResponse::ArenaDtor(void* object) {
  OTClientResponse* _this = reinterpret_cast< OTClientResponse* >(object);
  (void)_this;
}
void OTClientResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OTClientResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OTClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:otServicePB.OTClientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    function_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OTClientResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_function();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "otServicePB.OTClientResponse.function"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .otServicePB.OTClientResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OTClientResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:otServicePB.OTClientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string function = 1;
  if (_internal_has_function()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function().data(), static_cast<int>(this->_internal_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "otServicePB.OTClientResponse.function");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function(), target);
  }

  // repeated .otServicePB.OTClientResult result = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_result(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:otServicePB.OTClientResponse)
  return target;
}

size_t OTClientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:otServicePB.OTClientResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .otServicePB.OTClientResult result = 2;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string function = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OTClientResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OTClientResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OTClientResponse::GetClassData() const { return &_class_data_; }

void OTClientResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OTClientResponse *>(to)->MergeFrom(
      static_cast<const OTClientResponse &>(from));
}


void OTClientResponse::MergeFrom(const OTClientResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:otServicePB.OTClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  if (from._internal_has_function()) {
    _internal_set_function(from._internal_function());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OTClientResponse::CopyFrom(const OTClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:otServicePB.OTClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OTClientResponse::IsInitialized() const {
  return true;
}

void OTClientResponse::InternalSwap(OTClientResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  result_.InternalSwap(&other->result_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_, GetArenaForAllocation(),
      &other->function_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OTClientResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mmdcotservicehttpbroker_2eproto_getter, &descriptor_table_mmdcotservicehttpbroker_2eproto_once,
      file_level_metadata_mmdcotservicehttpbroker_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace otServicePB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::otServicePB::Response* Arena::CreateMaybeMessage< ::otServicePB::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::otServicePB::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::otServicePB::OTServiceData* Arena::CreateMaybeMessage< ::otServicePB::OTServiceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::otServicePB::OTServiceData >(arena);
}
template<> PROTOBUF_NOINLINE ::otServicePB::OTServerRequest* Arena::CreateMaybeMessage< ::otServicePB::OTServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::otServicePB::OTServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::otServicePB::OTServerResponse* Arena::CreateMaybeMessage< ::otServicePB::OTServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::otServicePB::OTServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::otServicePB::OTClientRequest_UinWithLabelMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::otServicePB::OTClientRequest_UinWithLabelMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::otServicePB::OTClientRequest_UinWithLabelMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::otServicePB::OTClientRequest* Arena::CreateMaybeMessage< ::otServicePB::OTClientRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::otServicePB::OTClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::otServicePB::OTClientResult_ResMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::otServicePB::OTClientResult_ResMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::otServicePB::OTClientResult_ResMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::otServicePB::OTClientResult* Arena::CreateMaybeMessage< ::otServicePB::OTClientResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::otServicePB::OTClientResult >(arena);
}
template<> PROTOBUF_NOINLINE ::otServicePB::OTClientResponse* Arena::CreateMaybeMessage< ::otServicePB::OTClientResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::otServicePB::OTClientResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
