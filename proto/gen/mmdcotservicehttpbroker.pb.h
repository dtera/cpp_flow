// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmdcotservicehttpbroker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mmdcotservicehttpbroker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mmdcotservicehttpbroker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mmdcotservicehttpbroker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mmdcotservicehttpbroker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mmdcotservicehttpbroker_2eproto;
namespace otServicePB {
class OTClientRequest;
struct OTClientRequestDefaultTypeInternal;
extern OTClientRequestDefaultTypeInternal _OTClientRequest_default_instance_;
class OTClientRequest_UinWithLabelMapEntry_DoNotUse;
struct OTClientRequest_UinWithLabelMapEntry_DoNotUseDefaultTypeInternal;
extern OTClientRequest_UinWithLabelMapEntry_DoNotUseDefaultTypeInternal _OTClientRequest_UinWithLabelMapEntry_DoNotUse_default_instance_;
class OTClientResponse;
struct OTClientResponseDefaultTypeInternal;
extern OTClientResponseDefaultTypeInternal _OTClientResponse_default_instance_;
class OTClientResult;
struct OTClientResultDefaultTypeInternal;
extern OTClientResultDefaultTypeInternal _OTClientResult_default_instance_;
class OTClientResult_ResMapEntry_DoNotUse;
struct OTClientResult_ResMapEntry_DoNotUseDefaultTypeInternal;
extern OTClientResult_ResMapEntry_DoNotUseDefaultTypeInternal _OTClientResult_ResMapEntry_DoNotUse_default_instance_;
class OTServerRequest;
struct OTServerRequestDefaultTypeInternal;
extern OTServerRequestDefaultTypeInternal _OTServerRequest_default_instance_;
class OTServerResponse;
struct OTServerResponseDefaultTypeInternal;
extern OTServerResponseDefaultTypeInternal _OTServerResponse_default_instance_;
class OTServiceData;
struct OTServiceDataDefaultTypeInternal;
extern OTServiceDataDefaultTypeInternal _OTServiceData_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace otServicePB
PROTOBUF_NAMESPACE_OPEN
template<> ::otServicePB::OTClientRequest* Arena::CreateMaybeMessage<::otServicePB::OTClientRequest>(Arena*);
template<> ::otServicePB::OTClientRequest_UinWithLabelMapEntry_DoNotUse* Arena::CreateMaybeMessage<::otServicePB::OTClientRequest_UinWithLabelMapEntry_DoNotUse>(Arena*);
template<> ::otServicePB::OTClientResponse* Arena::CreateMaybeMessage<::otServicePB::OTClientResponse>(Arena*);
template<> ::otServicePB::OTClientResult* Arena::CreateMaybeMessage<::otServicePB::OTClientResult>(Arena*);
template<> ::otServicePB::OTClientResult_ResMapEntry_DoNotUse* Arena::CreateMaybeMessage<::otServicePB::OTClientResult_ResMapEntry_DoNotUse>(Arena*);
template<> ::otServicePB::OTServerRequest* Arena::CreateMaybeMessage<::otServicePB::OTServerRequest>(Arena*);
template<> ::otServicePB::OTServerResponse* Arena::CreateMaybeMessage<::otServicePB::OTServerResponse>(Arena*);
template<> ::otServicePB::OTServiceData* Arena::CreateMaybeMessage<::otServicePB::OTServiceData>(Arena*);
template<> ::otServicePB::Response* Arena::CreateMaybeMessage<::otServicePB::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace otServicePB {

// ===================================================================

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return new Response();
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDataFieldNumber = 4,
    kCodeFieldNumber = 1,
    kReqTimeMillisFieldNumber = 3,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float reqTimeMillis = 3;
  bool has_reqtimemillis() const;
  private:
  bool _internal_has_reqtimemillis() const;
  public:
  void clear_reqtimemillis();
  float reqtimemillis() const;
  void set_reqtimemillis(float value);
  private:
  float _internal_reqtimemillis() const;
  void _internal_set_reqtimemillis(float value);
  public:

  // @@protoc_insertion_point(class_scope:otServicePB.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  float reqtimemillis_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class OTServiceData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.OTServiceData) */ {
 public:
  inline OTServiceData() : OTServiceData(nullptr) {}
  ~OTServiceData() override;
  explicit constexpr OTServiceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OTServiceData(const OTServiceData& from);
  OTServiceData(OTServiceData&& from) noexcept
    : OTServiceData() {
    *this = ::std::move(from);
  }

  inline OTServiceData& operator=(const OTServiceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OTServiceData& operator=(OTServiceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OTServiceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const OTServiceData* internal_default_instance() {
    return reinterpret_cast<const OTServiceData*>(
               &_OTServiceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OTServiceData& a, OTServiceData& b) {
    a.Swap(&b);
  }
  inline void Swap(OTServiceData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OTServiceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OTServiceData* New() const final {
    return new OTServiceData();
  }

  OTServiceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OTServiceData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OTServiceData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OTServiceData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OTServiceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.OTServiceData";
  }
  protected:
  explicit OTServiceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional string value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:otServicePB.OTServiceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class OTServerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.OTServerRequest) */ {
 public:
  inline OTServerRequest() : OTServerRequest(nullptr) {}
  ~OTServerRequest() override;
  explicit constexpr OTServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OTServerRequest(const OTServerRequest& from);
  OTServerRequest(OTServerRequest&& from) noexcept
    : OTServerRequest() {
    *this = ::std::move(from);
  }

  inline OTServerRequest& operator=(const OTServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OTServerRequest& operator=(OTServerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OTServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OTServerRequest* internal_default_instance() {
    return reinterpret_cast<const OTServerRequest*>(
               &_OTServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OTServerRequest& a, OTServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OTServerRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OTServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OTServerRequest* New() const final {
    return new OTServerRequest();
  }

  OTServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OTServerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OTServerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OTServerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OTServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.OTServerRequest";
  }
  protected:
  explicit OTServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 4,
    kFunctionFieldNumber = 1,
    kSessionTokenFieldNumber = 2,
    kKFieldNumber = 3,
  };
  // repeated string params = 4;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  const std::string& params(int index) const;
  std::string* mutable_params(int index);
  void set_params(int index, const std::string& value);
  void set_params(int index, std::string&& value);
  void set_params(int index, const char* value);
  void set_params(int index, const char* value, size_t size);
  std::string* add_params();
  void add_params(const std::string& value);
  void add_params(std::string&& value);
  void add_params(const char* value);
  void add_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_params();
  private:
  const std::string& _internal_params(int index) const;
  std::string* _internal_add_params();
  public:

  // optional string function = 1;
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  const std::string& function() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function();
  PROTOBUF_MUST_USE_RESULT std::string* release_function();
  void set_allocated_function(std::string* function);
  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // optional string sessionToken = 2;
  bool has_sessiontoken() const;
  private:
  bool _internal_has_sessiontoken() const;
  public:
  void clear_sessiontoken();
  const std::string& sessiontoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessiontoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessiontoken();
  PROTOBUF_MUST_USE_RESULT std::string* release_sessiontoken();
  void set_allocated_sessiontoken(std::string* sessiontoken);
  private:
  const std::string& _internal_sessiontoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessiontoken(const std::string& value);
  std::string* _internal_mutable_sessiontoken();
  public:

  // optional uint32 k = 3;
  bool has_k() const;
  private:
  bool _internal_has_k() const;
  public:
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::uint32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_k() const;
  void _internal_set_k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:otServicePB.OTServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessiontoken_;
  ::PROTOBUF_NAMESPACE_ID::uint32 k_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class OTServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.OTServerResponse) */ {
 public:
  inline OTServerResponse() : OTServerResponse(nullptr) {}
  ~OTServerResponse() override;
  explicit constexpr OTServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OTServerResponse(const OTServerResponse& from);
  OTServerResponse(OTServerResponse&& from) noexcept
    : OTServerResponse() {
    *this = ::std::move(from);
  }

  inline OTServerResponse& operator=(const OTServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OTServerResponse& operator=(OTServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OTServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OTServerResponse* internal_default_instance() {
    return reinterpret_cast<const OTServerResponse*>(
               &_OTServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OTServerResponse& a, OTServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OTServerResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OTServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OTServerResponse* New() const final {
    return new OTServerResponse();
  }

  OTServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OTServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OTServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OTServerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OTServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.OTServerResponse";
  }
  protected:
  explicit OTServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kFunctionFieldNumber = 1,
  };
  // repeated string values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // optional string function = 1;
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  const std::string& function() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function();
  PROTOBUF_MUST_USE_RESULT std::string* release_function();
  void set_allocated_function(std::string* function);
  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // @@protoc_insertion_point(class_scope:otServicePB.OTServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class OTClientRequest_UinWithLabelMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OTClientRequest_UinWithLabelMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OTClientRequest_UinWithLabelMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  OTClientRequest_UinWithLabelMapEntry_DoNotUse();
  explicit constexpr OTClientRequest_UinWithLabelMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit OTClientRequest_UinWithLabelMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OTClientRequest_UinWithLabelMapEntry_DoNotUse& other);
  static const OTClientRequest_UinWithLabelMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OTClientRequest_UinWithLabelMapEntry_DoNotUse*>(&_OTClientRequest_UinWithLabelMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class OTClientRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.OTClientRequest) */ {
 public:
  inline OTClientRequest() : OTClientRequest(nullptr) {}
  ~OTClientRequest() override;
  explicit constexpr OTClientRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OTClientRequest(const OTClientRequest& from);
  OTClientRequest(OTClientRequest&& from) noexcept
    : OTClientRequest() {
    *this = ::std::move(from);
  }

  inline OTClientRequest& operator=(const OTClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OTClientRequest& operator=(OTClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OTClientRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OTClientRequest* internal_default_instance() {
    return reinterpret_cast<const OTClientRequest*>(
               &_OTClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OTClientRequest& a, OTClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OTClientRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OTClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OTClientRequest* New() const final {
    return new OTClientRequest();
  }

  OTClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OTClientRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OTClientRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OTClientRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OTClientRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.OTClientRequest";
  }
  protected:
  explicit OTClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUinWithLabelMapFieldNumber = 2,
    kFunctionFieldNumber = 1,
  };
  // map<uint32, uint32> uinWithLabelMap = 2;
  int uinwithlabelmap_size() const;
  private:
  int _internal_uinwithlabelmap_size() const;
  public:
  void clear_uinwithlabelmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_uinwithlabelmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_uinwithlabelmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      uinwithlabelmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_uinwithlabelmap();

  // optional string function = 1;
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  const std::string& function() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function();
  PROTOBUF_MUST_USE_RESULT std::string* release_function();
  void set_allocated_function(std::string* function);
  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // @@protoc_insertion_point(class_scope:otServicePB.OTClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      OTClientRequest_UinWithLabelMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> uinwithlabelmap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class OTClientResult_ResMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OTClientResult_ResMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OTClientResult_ResMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  OTClientResult_ResMapEntry_DoNotUse();
  explicit constexpr OTClientResult_ResMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit OTClientResult_ResMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OTClientResult_ResMapEntry_DoNotUse& other);
  static const OTClientResult_ResMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OTClientResult_ResMapEntry_DoNotUse*>(&_OTClientResult_ResMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "otServicePB.OTClientResult.ResMapEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "otServicePB.OTClientResult.ResMapEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class OTClientResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.OTClientResult) */ {
 public:
  inline OTClientResult() : OTClientResult(nullptr) {}
  ~OTClientResult() override;
  explicit constexpr OTClientResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OTClientResult(const OTClientResult& from);
  OTClientResult(OTClientResult&& from) noexcept
    : OTClientResult() {
    *this = ::std::move(from);
  }

  inline OTClientResult& operator=(const OTClientResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OTClientResult& operator=(OTClientResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OTClientResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const OTClientResult* internal_default_instance() {
    return reinterpret_cast<const OTClientResult*>(
               &_OTClientResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OTClientResult& a, OTClientResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OTClientResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OTClientResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OTClientResult* New() const final {
    return new OTClientResult();
  }

  OTClientResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OTClientResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OTClientResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OTClientResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OTClientResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.OTClientResult";
  }
  protected:
  explicit OTClientResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kResMapFieldNumber = 1,
  };
  // map<string, string> resMap = 1;
  int resmap_size() const;
  private:
  int _internal_resmap_size() const;
  public:
  void clear_resmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_resmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_resmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      resmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_resmap();

  // @@protoc_insertion_point(class_scope:otServicePB.OTClientResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      OTClientResult_ResMapEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> resmap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class OTClientResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.OTClientResponse) */ {
 public:
  inline OTClientResponse() : OTClientResponse(nullptr) {}
  ~OTClientResponse() override;
  explicit constexpr OTClientResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OTClientResponse(const OTClientResponse& from);
  OTClientResponse(OTClientResponse&& from) noexcept
    : OTClientResponse() {
    *this = ::std::move(from);
  }

  inline OTClientResponse& operator=(const OTClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OTClientResponse& operator=(OTClientResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OTClientResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OTClientResponse* internal_default_instance() {
    return reinterpret_cast<const OTClientResponse*>(
               &_OTClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OTClientResponse& a, OTClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OTClientResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OTClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OTClientResponse* New() const final {
    return new OTClientResponse();
  }

  OTClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OTClientResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OTClientResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OTClientResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OTClientResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.OTClientResponse";
  }
  protected:
  explicit OTClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kFunctionFieldNumber = 1,
  };
  // repeated .otServicePB.OTClientResult result = 2;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::otServicePB::OTClientResult* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::OTClientResult >*
      mutable_result();
  private:
  const ::otServicePB::OTClientResult& _internal_result(int index) const;
  ::otServicePB::OTClientResult* _internal_add_result();
  public:
  const ::otServicePB::OTClientResult& result(int index) const;
  ::otServicePB::OTClientResult* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::OTClientResult >&
      result() const;

  // optional string function = 1;
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  const std::string& function() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function();
  PROTOBUF_MUST_USE_RESULT std::string* release_function();
  void set_allocated_function(std::string* function);
  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // @@protoc_insertion_point(class_scope:otServicePB.OTClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::OTClientResult > result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Response

// optional uint32 code = 1;
inline bool Response::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Response::has_code() const {
  return _internal_has_code();
}
inline void Response::clear_code() {
  code_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::code() const {
  // @@protoc_insertion_point(field_get:otServicePB.Response.code)
  return _internal_code();
}
inline void Response::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  code_ = value;
}
inline void Response::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:otServicePB.Response.code)
}

// optional string message = 2;
inline bool Response::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response::has_message() const {
  return _internal_has_message();
}
inline void Response::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:otServicePB.Response.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.Response.message)
}
inline std::string* Response::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:otServicePB.Response.message)
  return _s;
}
inline const std::string& Response::_internal_message() const {
  return message_.Get();
}
inline void Response::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:otServicePB.Response.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:otServicePB.Response.message)
}

// optional float reqTimeMillis = 3;
inline bool Response::_internal_has_reqtimemillis() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Response::has_reqtimemillis() const {
  return _internal_has_reqtimemillis();
}
inline void Response::clear_reqtimemillis() {
  reqtimemillis_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Response::_internal_reqtimemillis() const {
  return reqtimemillis_;
}
inline float Response::reqtimemillis() const {
  // @@protoc_insertion_point(field_get:otServicePB.Response.reqTimeMillis)
  return _internal_reqtimemillis();
}
inline void Response::_internal_set_reqtimemillis(float value) {
  _has_bits_[0] |= 0x00000008u;
  reqtimemillis_ = value;
}
inline void Response::set_reqtimemillis(float value) {
  _internal_set_reqtimemillis(value);
  // @@protoc_insertion_point(field_set:otServicePB.Response.reqTimeMillis)
}

// optional string data = 4;
inline bool Response::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response::has_data() const {
  return _internal_has_data();
}
inline void Response::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Response::data() const {
  // @@protoc_insertion_point(field_get:otServicePB.Response.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.Response.data)
}
inline std::string* Response::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:otServicePB.Response.data)
  return _s;
}
inline const std::string& Response::_internal_data() const {
  return data_.Get();
}
inline void Response::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_data() {
  // @@protoc_insertion_point(field_release:otServicePB.Response.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Response::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:otServicePB.Response.data)
}

// -------------------------------------------------------------------

// OTServiceData

// optional string value = 1;
inline bool OTServiceData::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OTServiceData::has_value() const {
  return _internal_has_value();
}
inline void OTServiceData::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OTServiceData::value() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServiceData.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OTServiceData::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.OTServiceData.value)
}
inline std::string* OTServiceData::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServiceData.value)
  return _s;
}
inline const std::string& OTServiceData::_internal_value() const {
  return value_.Get();
}
inline void OTServiceData::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OTServiceData::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OTServiceData::release_value() {
  // @@protoc_insertion_point(field_release:otServicePB.OTServiceData.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OTServiceData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTServiceData.value)
}

// -------------------------------------------------------------------

// OTServerRequest

// optional string function = 1;
inline bool OTServerRequest::_internal_has_function() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OTServerRequest::has_function() const {
  return _internal_has_function();
}
inline void OTServerRequest::clear_function() {
  function_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OTServerRequest::function() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerRequest.function)
  return _internal_function();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OTServerRequest::set_function(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.OTServerRequest.function)
}
inline std::string* OTServerRequest::mutable_function() {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServerRequest.function)
  return _s;
}
inline const std::string& OTServerRequest::_internal_function() const {
  return function_.Get();
}
inline void OTServerRequest::_internal_set_function(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OTServerRequest::_internal_mutable_function() {
  _has_bits_[0] |= 0x00000001u;
  return function_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OTServerRequest::release_function() {
  // @@protoc_insertion_point(field_release:otServicePB.OTServerRequest.function)
  if (!_internal_has_function()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return function_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OTServerRequest::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  function_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTServerRequest.function)
}

// optional string sessionToken = 2;
inline bool OTServerRequest::_internal_has_sessiontoken() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OTServerRequest::has_sessiontoken() const {
  return _internal_has_sessiontoken();
}
inline void OTServerRequest::clear_sessiontoken() {
  sessiontoken_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OTServerRequest::sessiontoken() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerRequest.sessionToken)
  return _internal_sessiontoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OTServerRequest::set_sessiontoken(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sessiontoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.OTServerRequest.sessionToken)
}
inline std::string* OTServerRequest::mutable_sessiontoken() {
  std::string* _s = _internal_mutable_sessiontoken();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServerRequest.sessionToken)
  return _s;
}
inline const std::string& OTServerRequest::_internal_sessiontoken() const {
  return sessiontoken_.Get();
}
inline void OTServerRequest::_internal_set_sessiontoken(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sessiontoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OTServerRequest::_internal_mutable_sessiontoken() {
  _has_bits_[0] |= 0x00000002u;
  return sessiontoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OTServerRequest::release_sessiontoken() {
  // @@protoc_insertion_point(field_release:otServicePB.OTServerRequest.sessionToken)
  if (!_internal_has_sessiontoken()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sessiontoken_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OTServerRequest::set_allocated_sessiontoken(std::string* sessiontoken) {
  if (sessiontoken != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sessiontoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessiontoken,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTServerRequest.sessionToken)
}

// optional uint32 k = 3;
inline bool OTServerRequest::_internal_has_k() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OTServerRequest::has_k() const {
  return _internal_has_k();
}
inline void OTServerRequest::clear_k() {
  k_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OTServerRequest::_internal_k() const {
  return k_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OTServerRequest::k() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerRequest.k)
  return _internal_k();
}
inline void OTServerRequest::_internal_set_k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  k_ = value;
}
inline void OTServerRequest::set_k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:otServicePB.OTServerRequest.k)
}

// repeated string params = 4;
inline int OTServerRequest::_internal_params_size() const {
  return params_.size();
}
inline int OTServerRequest::params_size() const {
  return _internal_params_size();
}
inline void OTServerRequest::clear_params() {
  params_.Clear();
}
inline std::string* OTServerRequest::add_params() {
  std::string* _s = _internal_add_params();
  // @@protoc_insertion_point(field_add_mutable:otServicePB.OTServerRequest.params)
  return _s;
}
inline const std::string& OTServerRequest::_internal_params(int index) const {
  return params_.Get(index);
}
inline const std::string& OTServerRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerRequest.params)
  return _internal_params(index);
}
inline std::string* OTServerRequest::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServerRequest.params)
  return params_.Mutable(index);
}
inline void OTServerRequest::set_params(int index, const std::string& value) {
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:otServicePB.OTServerRequest.params)
}
inline void OTServerRequest::set_params(int index, std::string&& value) {
  params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:otServicePB.OTServerRequest.params)
}
inline void OTServerRequest::set_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:otServicePB.OTServerRequest.params)
}
inline void OTServerRequest::set_params(int index, const char* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:otServicePB.OTServerRequest.params)
}
inline std::string* OTServerRequest::_internal_add_params() {
  return params_.Add();
}
inline void OTServerRequest::add_params(const std::string& value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:otServicePB.OTServerRequest.params)
}
inline void OTServerRequest::add_params(std::string&& value) {
  params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:otServicePB.OTServerRequest.params)
}
inline void OTServerRequest::add_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:otServicePB.OTServerRequest.params)
}
inline void OTServerRequest::add_params(const char* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:otServicePB.OTServerRequest.params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OTServerRequest::params() const {
  // @@protoc_insertion_point(field_list:otServicePB.OTServerRequest.params)
  return params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OTServerRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:otServicePB.OTServerRequest.params)
  return &params_;
}

// -------------------------------------------------------------------

// OTServerResponse

// optional string function = 1;
inline bool OTServerResponse::_internal_has_function() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OTServerResponse::has_function() const {
  return _internal_has_function();
}
inline void OTServerResponse::clear_function() {
  function_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OTServerResponse::function() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerResponse.function)
  return _internal_function();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OTServerResponse::set_function(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.OTServerResponse.function)
}
inline std::string* OTServerResponse::mutable_function() {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServerResponse.function)
  return _s;
}
inline const std::string& OTServerResponse::_internal_function() const {
  return function_.Get();
}
inline void OTServerResponse::_internal_set_function(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OTServerResponse::_internal_mutable_function() {
  _has_bits_[0] |= 0x00000001u;
  return function_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OTServerResponse::release_function() {
  // @@protoc_insertion_point(field_release:otServicePB.OTServerResponse.function)
  if (!_internal_has_function()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return function_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OTServerResponse::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  function_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTServerResponse.function)
}

// repeated string values = 2;
inline int OTServerResponse::_internal_values_size() const {
  return values_.size();
}
inline int OTServerResponse::values_size() const {
  return _internal_values_size();
}
inline void OTServerResponse::clear_values() {
  values_.Clear();
}
inline std::string* OTServerResponse::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:otServicePB.OTServerResponse.values)
  return _s;
}
inline const std::string& OTServerResponse::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& OTServerResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerResponse.values)
  return _internal_values(index);
}
inline std::string* OTServerResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServerResponse.values)
  return values_.Mutable(index);
}
inline void OTServerResponse::set_values(int index, const std::string& value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:otServicePB.OTServerResponse.values)
}
inline void OTServerResponse::set_values(int index, std::string&& value) {
  values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:otServicePB.OTServerResponse.values)
}
inline void OTServerResponse::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:otServicePB.OTServerResponse.values)
}
inline void OTServerResponse::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:otServicePB.OTServerResponse.values)
}
inline std::string* OTServerResponse::_internal_add_values() {
  return values_.Add();
}
inline void OTServerResponse::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:otServicePB.OTServerResponse.values)
}
inline void OTServerResponse::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:otServicePB.OTServerResponse.values)
}
inline void OTServerResponse::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:otServicePB.OTServerResponse.values)
}
inline void OTServerResponse::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:otServicePB.OTServerResponse.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OTServerResponse::values() const {
  // @@protoc_insertion_point(field_list:otServicePB.OTServerResponse.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OTServerResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:otServicePB.OTServerResponse.values)
  return &values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OTClientRequest

// optional string function = 1;
inline bool OTClientRequest::_internal_has_function() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OTClientRequest::has_function() const {
  return _internal_has_function();
}
inline void OTClientRequest::clear_function() {
  function_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OTClientRequest::function() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTClientRequest.function)
  return _internal_function();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OTClientRequest::set_function(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.OTClientRequest.function)
}
inline std::string* OTClientRequest::mutable_function() {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTClientRequest.function)
  return _s;
}
inline const std::string& OTClientRequest::_internal_function() const {
  return function_.Get();
}
inline void OTClientRequest::_internal_set_function(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OTClientRequest::_internal_mutable_function() {
  _has_bits_[0] |= 0x00000001u;
  return function_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OTClientRequest::release_function() {
  // @@protoc_insertion_point(field_release:otServicePB.OTClientRequest.function)
  if (!_internal_has_function()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return function_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OTClientRequest::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  function_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTClientRequest.function)
}

// map<uint32, uint32> uinWithLabelMap = 2;
inline int OTClientRequest::_internal_uinwithlabelmap_size() const {
  return uinwithlabelmap_.size();
}
inline int OTClientRequest::uinwithlabelmap_size() const {
  return _internal_uinwithlabelmap_size();
}
inline void OTClientRequest::clear_uinwithlabelmap() {
  uinwithlabelmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
OTClientRequest::_internal_uinwithlabelmap() const {
  return uinwithlabelmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
OTClientRequest::uinwithlabelmap() const {
  // @@protoc_insertion_point(field_map:otServicePB.OTClientRequest.uinWithLabelMap)
  return _internal_uinwithlabelmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
OTClientRequest::_internal_mutable_uinwithlabelmap() {
  return uinwithlabelmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
OTClientRequest::mutable_uinwithlabelmap() {
  // @@protoc_insertion_point(field_mutable_map:otServicePB.OTClientRequest.uinWithLabelMap)
  return _internal_mutable_uinwithlabelmap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OTClientResult

// map<string, string> resMap = 1;
inline int OTClientResult::_internal_resmap_size() const {
  return resmap_.size();
}
inline int OTClientResult::resmap_size() const {
  return _internal_resmap_size();
}
inline void OTClientResult::clear_resmap() {
  resmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
OTClientResult::_internal_resmap() const {
  return resmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
OTClientResult::resmap() const {
  // @@protoc_insertion_point(field_map:otServicePB.OTClientResult.resMap)
  return _internal_resmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
OTClientResult::_internal_mutable_resmap() {
  return resmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
OTClientResult::mutable_resmap() {
  // @@protoc_insertion_point(field_mutable_map:otServicePB.OTClientResult.resMap)
  return _internal_mutable_resmap();
}

// -------------------------------------------------------------------

// OTClientResponse

// optional string function = 1;
inline bool OTClientResponse::_internal_has_function() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OTClientResponse::has_function() const {
  return _internal_has_function();
}
inline void OTClientResponse::clear_function() {
  function_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OTClientResponse::function() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTClientResponse.function)
  return _internal_function();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OTClientResponse::set_function(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.OTClientResponse.function)
}
inline std::string* OTClientResponse::mutable_function() {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTClientResponse.function)
  return _s;
}
inline const std::string& OTClientResponse::_internal_function() const {
  return function_.Get();
}
inline void OTClientResponse::_internal_set_function(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OTClientResponse::_internal_mutable_function() {
  _has_bits_[0] |= 0x00000001u;
  return function_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OTClientResponse::release_function() {
  // @@protoc_insertion_point(field_release:otServicePB.OTClientResponse.function)
  if (!_internal_has_function()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return function_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OTClientResponse::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  function_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTClientResponse.function)
}

// repeated .otServicePB.OTClientResult result = 2;
inline int OTClientResponse::_internal_result_size() const {
  return result_.size();
}
inline int OTClientResponse::result_size() const {
  return _internal_result_size();
}
inline void OTClientResponse::clear_result() {
  result_.Clear();
}
inline ::otServicePB::OTClientResult* OTClientResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:otServicePB.OTClientResponse.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::OTClientResult >*
OTClientResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:otServicePB.OTClientResponse.result)
  return &result_;
}
inline const ::otServicePB::OTClientResult& OTClientResponse::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::otServicePB::OTClientResult& OTClientResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:otServicePB.OTClientResponse.result)
  return _internal_result(index);
}
inline ::otServicePB::OTClientResult* OTClientResponse::_internal_add_result() {
  return result_.Add();
}
inline ::otServicePB::OTClientResult* OTClientResponse::add_result() {
  ::otServicePB::OTClientResult* _add = _internal_add_result();
  // @@protoc_insertion_point(field_add:otServicePB.OTClientResponse.result)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::OTClientResult >&
OTClientResponse::result() const {
  // @@protoc_insertion_point(field_list:otServicePB.OTClientResponse.result)
  return result_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace otServicePB

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mmdcotservicehttpbroker_2eproto
