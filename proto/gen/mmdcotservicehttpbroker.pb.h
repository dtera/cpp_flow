// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmdcotservicehttpbroker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mmdcotservicehttpbroker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mmdcotservicehttpbroker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mmdcotservicehttpbroker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mmdcotservicehttpbroker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mmdcotservicehttpbroker_2eproto;
namespace otServicePB {
class Bytes;
struct BytesDefaultTypeInternal;
extern BytesDefaultTypeInternal _Bytes_default_instance_;
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Fields;
struct FieldsDefaultTypeInternal;
extern FieldsDefaultTypeInternal _Fields_default_instance_;
class Fields_MsgEntry_DoNotUse;
struct Fields_MsgEntry_DoNotUseDefaultTypeInternal;
extern Fields_MsgEntry_DoNotUseDefaultTypeInternal _Fields_MsgEntry_DoNotUse_default_instance_;
class OTClientRequest;
struct OTClientRequestDefaultTypeInternal;
extern OTClientRequestDefaultTypeInternal _OTClientRequest_default_instance_;
class OTClientRequest_UinWithLabelMapEntry_DoNotUse;
struct OTClientRequest_UinWithLabelMapEntry_DoNotUseDefaultTypeInternal;
extern OTClientRequest_UinWithLabelMapEntry_DoNotUseDefaultTypeInternal _OTClientRequest_UinWithLabelMapEntry_DoNotUse_default_instance_;
class OTClientResponse;
struct OTClientResponseDefaultTypeInternal;
extern OTClientResponseDefaultTypeInternal _OTClientResponse_default_instance_;
class OTClientResponseWrapper;
struct OTClientResponseWrapperDefaultTypeInternal;
extern OTClientResponseWrapperDefaultTypeInternal _OTClientResponseWrapper_default_instance_;
class OTClientResponse_ResMapEntry_DoNotUse;
struct OTClientResponse_ResMapEntry_DoNotUseDefaultTypeInternal;
extern OTClientResponse_ResMapEntry_DoNotUseDefaultTypeInternal _OTClientResponse_ResMapEntry_DoNotUse_default_instance_;
class OTServerRequest;
struct OTServerRequestDefaultTypeInternal;
extern OTServerRequestDefaultTypeInternal _OTServerRequest_default_instance_;
class OTServerResponse;
struct OTServerResponseDefaultTypeInternal;
extern OTServerResponseDefaultTypeInternal _OTServerResponse_default_instance_;
class OTServerResponseWrapper;
struct OTServerResponseWrapperDefaultTypeInternal;
extern OTServerResponseWrapperDefaultTypeInternal _OTServerResponseWrapper_default_instance_;
class OTServiceData;
struct OTServiceDataDefaultTypeInternal;
extern OTServiceDataDefaultTypeInternal _OTServiceData_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace otServicePB
PROTOBUF_NAMESPACE_OPEN
template<> ::otServicePB::Bytes* Arena::CreateMaybeMessage<::otServicePB::Bytes>(Arena*);
template<> ::otServicePB::Error* Arena::CreateMaybeMessage<::otServicePB::Error>(Arena*);
template<> ::otServicePB::Fields* Arena::CreateMaybeMessage<::otServicePB::Fields>(Arena*);
template<> ::otServicePB::Fields_MsgEntry_DoNotUse* Arena::CreateMaybeMessage<::otServicePB::Fields_MsgEntry_DoNotUse>(Arena*);
template<> ::otServicePB::OTClientRequest* Arena::CreateMaybeMessage<::otServicePB::OTClientRequest>(Arena*);
template<> ::otServicePB::OTClientRequest_UinWithLabelMapEntry_DoNotUse* Arena::CreateMaybeMessage<::otServicePB::OTClientRequest_UinWithLabelMapEntry_DoNotUse>(Arena*);
template<> ::otServicePB::OTClientResponse* Arena::CreateMaybeMessage<::otServicePB::OTClientResponse>(Arena*);
template<> ::otServicePB::OTClientResponseWrapper* Arena::CreateMaybeMessage<::otServicePB::OTClientResponseWrapper>(Arena*);
template<> ::otServicePB::OTClientResponse_ResMapEntry_DoNotUse* Arena::CreateMaybeMessage<::otServicePB::OTClientResponse_ResMapEntry_DoNotUse>(Arena*);
template<> ::otServicePB::OTServerRequest* Arena::CreateMaybeMessage<::otServicePB::OTServerRequest>(Arena*);
template<> ::otServicePB::OTServerResponse* Arena::CreateMaybeMessage<::otServicePB::OTServerResponse>(Arena*);
template<> ::otServicePB::OTServerResponseWrapper* Arena::CreateMaybeMessage<::otServicePB::OTServerResponseWrapper>(Arena*);
template<> ::otServicePB::OTServiceData* Arena::CreateMaybeMessage<::otServicePB::OTServiceData>(Arena*);
template<> ::otServicePB::Response* Arena::CreateMaybeMessage<::otServicePB::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace otServicePB {

// ===================================================================

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDataFieldNumber = 4,
    kCodeFieldNumber = 1,
    kReqTimeMillisFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 code = 1;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // float reqTimeMillis = 3;
  void clear_reqtimemillis();
  float reqtimemillis() const;
  void set_reqtimemillis(float value);
  private:
  float _internal_reqtimemillis() const;
  void _internal_set_reqtimemillis(float value);
  public:

  // @@protoc_insertion_point(class_scope:otServicePB.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t code_;
  float reqtimemillis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  explicit constexpr Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 code = 1;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:otServicePB.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  uint32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class OTServiceData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.OTServiceData) */ {
 public:
  inline OTServiceData() : OTServiceData(nullptr) {}
  ~OTServiceData() override;
  explicit constexpr OTServiceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OTServiceData(const OTServiceData& from);
  OTServiceData(OTServiceData&& from) noexcept
    : OTServiceData() {
    *this = ::std::move(from);
  }

  inline OTServiceData& operator=(const OTServiceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OTServiceData& operator=(OTServiceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OTServiceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const OTServiceData* internal_default_instance() {
    return reinterpret_cast<const OTServiceData*>(
               &_OTServiceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OTServiceData& a, OTServiceData& b) {
    a.Swap(&b);
  }
  inline void Swap(OTServiceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OTServiceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OTServiceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OTServiceData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OTServiceData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OTServiceData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OTServiceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.OTServiceData";
  }
  protected:
  explicit OTServiceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:otServicePB.OTServiceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class Bytes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.Bytes) */ {
 public:
  inline Bytes() : Bytes(nullptr) {}
  ~Bytes() override;
  explicit constexpr Bytes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bytes(const Bytes& from);
  Bytes(Bytes&& from) noexcept
    : Bytes() {
    *this = ::std::move(from);
  }

  inline Bytes& operator=(const Bytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bytes& operator=(Bytes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bytes& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bytes* internal_default_instance() {
    return reinterpret_cast<const Bytes*>(
               &_Bytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Bytes& a, Bytes& b) {
    a.Swap(&b);
  }
  inline void Swap(Bytes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bytes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bytes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bytes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bytes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bytes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bytes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.Bytes";
  }
  protected:
  explicit Bytes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBtsFieldNumber = 1,
  };
  // repeated uint32 bts = 1;
  int bts_size() const;
  private:
  int _internal_bts_size() const;
  public:
  void clear_bts();
  private:
  uint32_t _internal_bts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_bts() const;
  void _internal_add_bts(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_bts();
  public:
  uint32_t bts(int index) const;
  void set_bts(int index, uint32_t value);
  void add_bts(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      bts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_bts();

  // @@protoc_insertion_point(class_scope:otServicePB.Bytes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > bts_;
  mutable std::atomic<int> _bts_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class OTServerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.OTServerRequest) */ {
 public:
  inline OTServerRequest() : OTServerRequest(nullptr) {}
  ~OTServerRequest() override;
  explicit constexpr OTServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OTServerRequest(const OTServerRequest& from);
  OTServerRequest(OTServerRequest&& from) noexcept
    : OTServerRequest() {
    *this = ::std::move(from);
  }

  inline OTServerRequest& operator=(const OTServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OTServerRequest& operator=(OTServerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OTServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OTServerRequest* internal_default_instance() {
    return reinterpret_cast<const OTServerRequest*>(
               &_OTServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OTServerRequest& a, OTServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OTServerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OTServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OTServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OTServerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OTServerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OTServerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OTServerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.OTServerRequest";
  }
  protected:
  explicit OTServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 4,
    kBytesFieldNumber = 5,
    kFunctionFieldNumber = 1,
    kSessionTokenFieldNumber = 2,
    kKFieldNumber = 3,
  };
  // repeated string keys = 4;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // repeated .otServicePB.Bytes bytes = 5;
  int bytes_size() const;
  private:
  int _internal_bytes_size() const;
  public:
  void clear_bytes();
  ::otServicePB::Bytes* mutable_bytes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::Bytes >*
      mutable_bytes();
  private:
  const ::otServicePB::Bytes& _internal_bytes(int index) const;
  ::otServicePB::Bytes* _internal_add_bytes();
  public:
  const ::otServicePB::Bytes& bytes(int index) const;
  ::otServicePB::Bytes* add_bytes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::Bytes >&
      bytes() const;

  // string function = 1;
  void clear_function();
  const std::string& function() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function();
  PROTOBUF_NODISCARD std::string* release_function();
  void set_allocated_function(std::string* function);
  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // uint32 sessionToken = 2;
  void clear_sessiontoken();
  uint32_t sessiontoken() const;
  void set_sessiontoken(uint32_t value);
  private:
  uint32_t _internal_sessiontoken() const;
  void _internal_set_sessiontoken(uint32_t value);
  public:

  // uint32 k = 3;
  void clear_k();
  uint32_t k() const;
  void set_k(uint32_t value);
  private:
  uint32_t _internal_k() const;
  void _internal_set_k(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:otServicePB.OTServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::Bytes > bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
  uint32_t sessiontoken_;
  uint32_t k_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class OTServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.OTServerResponse) */ {
 public:
  inline OTServerResponse() : OTServerResponse(nullptr) {}
  ~OTServerResponse() override;
  explicit constexpr OTServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OTServerResponse(const OTServerResponse& from);
  OTServerResponse(OTServerResponse&& from) noexcept
    : OTServerResponse() {
    *this = ::std::move(from);
  }

  inline OTServerResponse& operator=(const OTServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OTServerResponse& operator=(OTServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OTServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OTServerResponse* internal_default_instance() {
    return reinterpret_cast<const OTServerResponse*>(
               &_OTServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OTServerResponse& a, OTServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OTServerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OTServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OTServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OTServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OTServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OTServerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OTServerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.OTServerResponse";
  }
  protected:
  explicit OTServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kBytesFieldNumber = 3,
    kFunctionFieldNumber = 1,
  };
  // repeated string values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // repeated .otServicePB.Bytes bytes = 3;
  int bytes_size() const;
  private:
  int _internal_bytes_size() const;
  public:
  void clear_bytes();
  ::otServicePB::Bytes* mutable_bytes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::Bytes >*
      mutable_bytes();
  private:
  const ::otServicePB::Bytes& _internal_bytes(int index) const;
  ::otServicePB::Bytes* _internal_add_bytes();
  public:
  const ::otServicePB::Bytes& bytes(int index) const;
  ::otServicePB::Bytes* add_bytes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::Bytes >&
      bytes() const;

  // string function = 1;
  void clear_function();
  const std::string& function() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function();
  PROTOBUF_NODISCARD std::string* release_function();
  void set_allocated_function(std::string* function);
  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // @@protoc_insertion_point(class_scope:otServicePB.OTServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::Bytes > bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class OTServerResponseWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.OTServerResponseWrapper) */ {
 public:
  inline OTServerResponseWrapper() : OTServerResponseWrapper(nullptr) {}
  ~OTServerResponseWrapper() override;
  explicit constexpr OTServerResponseWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OTServerResponseWrapper(const OTServerResponseWrapper& from);
  OTServerResponseWrapper(OTServerResponseWrapper&& from) noexcept
    : OTServerResponseWrapper() {
    *this = ::std::move(from);
  }

  inline OTServerResponseWrapper& operator=(const OTServerResponseWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline OTServerResponseWrapper& operator=(OTServerResponseWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OTServerResponseWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const OTServerResponseWrapper* internal_default_instance() {
    return reinterpret_cast<const OTServerResponseWrapper*>(
               &_OTServerResponseWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OTServerResponseWrapper& a, OTServerResponseWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(OTServerResponseWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OTServerResponseWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OTServerResponseWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OTServerResponseWrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OTServerResponseWrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OTServerResponseWrapper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OTServerResponseWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.OTServerResponseWrapper";
  }
  protected:
  explicit OTServerResponseWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // .otServicePB.Error error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::otServicePB::Error& error() const;
  PROTOBUF_NODISCARD ::otServicePB::Error* release_error();
  ::otServicePB::Error* mutable_error();
  void set_allocated_error(::otServicePB::Error* error);
  private:
  const ::otServicePB::Error& _internal_error() const;
  ::otServicePB::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::otServicePB::Error* error);
  ::otServicePB::Error* unsafe_arena_release_error();

  // .otServicePB.OTServerResponse result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::otServicePB::OTServerResponse& result() const;
  PROTOBUF_NODISCARD ::otServicePB::OTServerResponse* release_result();
  ::otServicePB::OTServerResponse* mutable_result();
  void set_allocated_result(::otServicePB::OTServerResponse* result);
  private:
  const ::otServicePB::OTServerResponse& _internal_result() const;
  ::otServicePB::OTServerResponse* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::otServicePB::OTServerResponse* result);
  ::otServicePB::OTServerResponse* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:otServicePB.OTServerResponseWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::otServicePB::Error* error_;
  ::otServicePB::OTServerResponse* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class OTClientRequest_UinWithLabelMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OTClientRequest_UinWithLabelMapEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OTClientRequest_UinWithLabelMapEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  OTClientRequest_UinWithLabelMapEntry_DoNotUse();
  explicit constexpr OTClientRequest_UinWithLabelMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit OTClientRequest_UinWithLabelMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OTClientRequest_UinWithLabelMapEntry_DoNotUse& other);
  static const OTClientRequest_UinWithLabelMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OTClientRequest_UinWithLabelMapEntry_DoNotUse*>(&_OTClientRequest_UinWithLabelMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class OTClientRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.OTClientRequest) */ {
 public:
  inline OTClientRequest() : OTClientRequest(nullptr) {}
  ~OTClientRequest() override;
  explicit constexpr OTClientRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OTClientRequest(const OTClientRequest& from);
  OTClientRequest(OTClientRequest&& from) noexcept
    : OTClientRequest() {
    *this = ::std::move(from);
  }

  inline OTClientRequest& operator=(const OTClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OTClientRequest& operator=(OTClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OTClientRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OTClientRequest* internal_default_instance() {
    return reinterpret_cast<const OTClientRequest*>(
               &_OTClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OTClientRequest& a, OTClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OTClientRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OTClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OTClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OTClientRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OTClientRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OTClientRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OTClientRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.OTClientRequest";
  }
  protected:
  explicit OTClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUinWithLabelMapFieldNumber = 2,
    kFunctionFieldNumber = 1,
  };
  // map<uint32, uint32> uinWithLabelMap = 2;
  int uinwithlabelmap_size() const;
  private:
  int _internal_uinwithlabelmap_size() const;
  public:
  void clear_uinwithlabelmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_uinwithlabelmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_uinwithlabelmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      uinwithlabelmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_uinwithlabelmap();

  // string function = 1;
  void clear_function();
  const std::string& function() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function();
  PROTOBUF_NODISCARD std::string* release_function();
  void set_allocated_function(std::string* function);
  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // @@protoc_insertion_point(class_scope:otServicePB.OTClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      OTClientRequest_UinWithLabelMapEntry_DoNotUse,
      uint32_t, uint32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> uinwithlabelmap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class Fields_MsgEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Fields_MsgEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Fields_MsgEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Fields_MsgEntry_DoNotUse();
  explicit constexpr Fields_MsgEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Fields_MsgEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Fields_MsgEntry_DoNotUse& other);
  static const Fields_MsgEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Fields_MsgEntry_DoNotUse*>(&_Fields_MsgEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "otServicePB.Fields.MsgEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "otServicePB.Fields.MsgEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Fields final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.Fields) */ {
 public:
  inline Fields() : Fields(nullptr) {}
  ~Fields() override;
  explicit constexpr Fields(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fields(const Fields& from);
  Fields(Fields&& from) noexcept
    : Fields() {
    *this = ::std::move(from);
  }

  inline Fields& operator=(const Fields& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fields& operator=(Fields&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fields& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fields* internal_default_instance() {
    return reinterpret_cast<const Fields*>(
               &_Fields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Fields& a, Fields& b) {
    a.Swap(&b);
  }
  inline void Swap(Fields* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fields* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fields>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fields& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fields& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fields* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.Fields";
  }
  protected:
  explicit Fields(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // map<string, string> msg = 1;
  int msg_size() const;
  private:
  int _internal_msg_size() const;
  public:
  void clear_msg();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_msg() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_msg();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      msg() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_msg();

  // @@protoc_insertion_point(class_scope:otServicePB.Fields)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Fields_MsgEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class OTClientResponse_ResMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OTClientResponse_ResMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OTClientResponse_ResMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  OTClientResponse_ResMapEntry_DoNotUse();
  explicit constexpr OTClientResponse_ResMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit OTClientResponse_ResMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OTClientResponse_ResMapEntry_DoNotUse& other);
  static const OTClientResponse_ResMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OTClientResponse_ResMapEntry_DoNotUse*>(&_OTClientResponse_ResMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "otServicePB.OTClientResponse.ResMapEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "otServicePB.OTClientResponse.ResMapEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class OTClientResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.OTClientResponse) */ {
 public:
  inline OTClientResponse() : OTClientResponse(nullptr) {}
  ~OTClientResponse() override;
  explicit constexpr OTClientResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OTClientResponse(const OTClientResponse& from);
  OTClientResponse(OTClientResponse&& from) noexcept
    : OTClientResponse() {
    *this = ::std::move(from);
  }

  inline OTClientResponse& operator=(const OTClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OTClientResponse& operator=(OTClientResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OTClientResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OTClientResponse* internal_default_instance() {
    return reinterpret_cast<const OTClientResponse*>(
               &_OTClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OTClientResponse& a, OTClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OTClientResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OTClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OTClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OTClientResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OTClientResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OTClientResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OTClientResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.OTClientResponse";
  }
  protected:
  explicit OTClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kResMapFieldNumber = 3,
    kFunctionFieldNumber = 1,
    kReqTimeMillisFieldNumber = 2,
  };
  // map<string, string> resMap = 3;
  int resmap_size() const;
  private:
  int _internal_resmap_size() const;
  public:
  void clear_resmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_resmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_resmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      resmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_resmap();

  // string function = 1;
  void clear_function();
  const std::string& function() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function();
  PROTOBUF_NODISCARD std::string* release_function();
  void set_allocated_function(std::string* function);
  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // float reqTimeMillis = 2;
  void clear_reqtimemillis();
  float reqtimemillis() const;
  void set_reqtimemillis(float value);
  private:
  float _internal_reqtimemillis() const;
  void _internal_set_reqtimemillis(float value);
  public:

  // @@protoc_insertion_point(class_scope:otServicePB.OTClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      OTClientResponse_ResMapEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> resmap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
  float reqtimemillis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// -------------------------------------------------------------------

class OTClientResponseWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:otServicePB.OTClientResponseWrapper) */ {
 public:
  inline OTClientResponseWrapper() : OTClientResponseWrapper(nullptr) {}
  ~OTClientResponseWrapper() override;
  explicit constexpr OTClientResponseWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OTClientResponseWrapper(const OTClientResponseWrapper& from);
  OTClientResponseWrapper(OTClientResponseWrapper&& from) noexcept
    : OTClientResponseWrapper() {
    *this = ::std::move(from);
  }

  inline OTClientResponseWrapper& operator=(const OTClientResponseWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline OTClientResponseWrapper& operator=(OTClientResponseWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OTClientResponseWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const OTClientResponseWrapper* internal_default_instance() {
    return reinterpret_cast<const OTClientResponseWrapper*>(
               &_OTClientResponseWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(OTClientResponseWrapper& a, OTClientResponseWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(OTClientResponseWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OTClientResponseWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OTClientResponseWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OTClientResponseWrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OTClientResponseWrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OTClientResponseWrapper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OTClientResponseWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otServicePB.OTClientResponseWrapper";
  }
  protected:
  explicit OTClientResponseWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .otServicePB.OTClientResponse result = 2;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::otServicePB::OTClientResponse* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::OTClientResponse >*
      mutable_result();
  private:
  const ::otServicePB::OTClientResponse& _internal_result(int index) const;
  ::otServicePB::OTClientResponse* _internal_add_result();
  public:
  const ::otServicePB::OTClientResponse& result(int index) const;
  ::otServicePB::OTClientResponse* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::OTClientResponse >&
      result() const;

  // .otServicePB.Error error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::otServicePB::Error& error() const;
  PROTOBUF_NODISCARD ::otServicePB::Error* release_error();
  ::otServicePB::Error* mutable_error();
  void set_allocated_error(::otServicePB::Error* error);
  private:
  const ::otServicePB::Error& _internal_error() const;
  ::otServicePB::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::otServicePB::Error* error);
  ::otServicePB::Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:otServicePB.OTClientResponseWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::OTClientResponse > result_;
  ::otServicePB::Error* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mmdcotservicehttpbroker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Response

// uint32 code = 1;
inline void Response::clear_code() {
  code_ = 0u;
}
inline uint32_t Response::_internal_code() const {
  return code_;
}
inline uint32_t Response::code() const {
  // @@protoc_insertion_point(field_get:otServicePB.Response.code)
  return _internal_code();
}
inline void Response::_internal_set_code(uint32_t value) {
  
  code_ = value;
}
inline void Response::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:otServicePB.Response.code)
}

// string message = 2;
inline void Response::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:otServicePB.Response.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.Response.message)
}
inline std::string* Response::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:otServicePB.Response.message)
  return _s;
}
inline const std::string& Response::_internal_message() const {
  return message_.Get();
}
inline void Response::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:otServicePB.Response.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:otServicePB.Response.message)
}

// float reqTimeMillis = 3;
inline void Response::clear_reqtimemillis() {
  reqtimemillis_ = 0;
}
inline float Response::_internal_reqtimemillis() const {
  return reqtimemillis_;
}
inline float Response::reqtimemillis() const {
  // @@protoc_insertion_point(field_get:otServicePB.Response.reqTimeMillis)
  return _internal_reqtimemillis();
}
inline void Response::_internal_set_reqtimemillis(float value) {
  
  reqtimemillis_ = value;
}
inline void Response::set_reqtimemillis(float value) {
  _internal_set_reqtimemillis(value);
  // @@protoc_insertion_point(field_set:otServicePB.Response.reqTimeMillis)
}

// string data = 4;
inline void Response::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Response::data() const {
  // @@protoc_insertion_point(field_get:otServicePB.Response.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.Response.data)
}
inline std::string* Response::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:otServicePB.Response.data)
  return _s;
}
inline const std::string& Response::_internal_data() const {
  return data_.Get();
}
inline void Response::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_data() {
  // @@protoc_insertion_point(field_release:otServicePB.Response.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Response::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:otServicePB.Response.data)
}

// -------------------------------------------------------------------

// Error

// uint32 code = 1;
inline void Error::clear_code() {
  code_ = 0u;
}
inline uint32_t Error::_internal_code() const {
  return code_;
}
inline uint32_t Error::code() const {
  // @@protoc_insertion_point(field_get:otServicePB.Error.code)
  return _internal_code();
}
inline void Error::_internal_set_code(uint32_t value) {
  
  code_ = value;
}
inline void Error::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:otServicePB.Error.code)
}

// string message = 2;
inline void Error::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:otServicePB.Error.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Error::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.Error.message)
}
inline std::string* Error::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:otServicePB.Error.message)
  return _s;
}
inline const std::string& Error::_internal_message() const {
  return message_.Get();
}
inline void Error::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Error::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:otServicePB.Error.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Error::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:otServicePB.Error.message)
}

// -------------------------------------------------------------------

// OTServiceData

// string value = 1;
inline void OTServiceData::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& OTServiceData::value() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServiceData.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OTServiceData::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.OTServiceData.value)
}
inline std::string* OTServiceData::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServiceData.value)
  return _s;
}
inline const std::string& OTServiceData::_internal_value() const {
  return value_.Get();
}
inline void OTServiceData::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OTServiceData::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OTServiceData::release_value() {
  // @@protoc_insertion_point(field_release:otServicePB.OTServiceData.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OTServiceData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTServiceData.value)
}

// -------------------------------------------------------------------

// Bytes

// repeated uint32 bts = 1;
inline int Bytes::_internal_bts_size() const {
  return bts_.size();
}
inline int Bytes::bts_size() const {
  return _internal_bts_size();
}
inline void Bytes::clear_bts() {
  bts_.Clear();
}
inline uint32_t Bytes::_internal_bts(int index) const {
  return bts_.Get(index);
}
inline uint32_t Bytes::bts(int index) const {
  // @@protoc_insertion_point(field_get:otServicePB.Bytes.bts)
  return _internal_bts(index);
}
inline void Bytes::set_bts(int index, uint32_t value) {
  bts_.Set(index, value);
  // @@protoc_insertion_point(field_set:otServicePB.Bytes.bts)
}
inline void Bytes::_internal_add_bts(uint32_t value) {
  bts_.Add(value);
}
inline void Bytes::add_bts(uint32_t value) {
  _internal_add_bts(value);
  // @@protoc_insertion_point(field_add:otServicePB.Bytes.bts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bytes::_internal_bts() const {
  return bts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bytes::bts() const {
  // @@protoc_insertion_point(field_list:otServicePB.Bytes.bts)
  return _internal_bts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bytes::_internal_mutable_bts() {
  return &bts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bytes::mutable_bts() {
  // @@protoc_insertion_point(field_mutable_list:otServicePB.Bytes.bts)
  return _internal_mutable_bts();
}

// -------------------------------------------------------------------

// OTServerRequest

// string function = 1;
inline void OTServerRequest::clear_function() {
  function_.ClearToEmpty();
}
inline const std::string& OTServerRequest::function() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerRequest.function)
  return _internal_function();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OTServerRequest::set_function(ArgT0&& arg0, ArgT... args) {
 
 function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.OTServerRequest.function)
}
inline std::string* OTServerRequest::mutable_function() {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServerRequest.function)
  return _s;
}
inline const std::string& OTServerRequest::_internal_function() const {
  return function_.Get();
}
inline void OTServerRequest::_internal_set_function(const std::string& value) {
  
  function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OTServerRequest::_internal_mutable_function() {
  
  return function_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OTServerRequest::release_function() {
  // @@protoc_insertion_point(field_release:otServicePB.OTServerRequest.function)
  return function_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OTServerRequest::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    
  } else {
    
  }
  function_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTServerRequest.function)
}

// uint32 sessionToken = 2;
inline void OTServerRequest::clear_sessiontoken() {
  sessiontoken_ = 0u;
}
inline uint32_t OTServerRequest::_internal_sessiontoken() const {
  return sessiontoken_;
}
inline uint32_t OTServerRequest::sessiontoken() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerRequest.sessionToken)
  return _internal_sessiontoken();
}
inline void OTServerRequest::_internal_set_sessiontoken(uint32_t value) {
  
  sessiontoken_ = value;
}
inline void OTServerRequest::set_sessiontoken(uint32_t value) {
  _internal_set_sessiontoken(value);
  // @@protoc_insertion_point(field_set:otServicePB.OTServerRequest.sessionToken)
}

// uint32 k = 3;
inline void OTServerRequest::clear_k() {
  k_ = 0u;
}
inline uint32_t OTServerRequest::_internal_k() const {
  return k_;
}
inline uint32_t OTServerRequest::k() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerRequest.k)
  return _internal_k();
}
inline void OTServerRequest::_internal_set_k(uint32_t value) {
  
  k_ = value;
}
inline void OTServerRequest::set_k(uint32_t value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:otServicePB.OTServerRequest.k)
}

// repeated string keys = 4;
inline int OTServerRequest::_internal_keys_size() const {
  return keys_.size();
}
inline int OTServerRequest::keys_size() const {
  return _internal_keys_size();
}
inline void OTServerRequest::clear_keys() {
  keys_.Clear();
}
inline std::string* OTServerRequest::add_keys() {
  std::string* _s = _internal_add_keys();
  // @@protoc_insertion_point(field_add_mutable:otServicePB.OTServerRequest.keys)
  return _s;
}
inline const std::string& OTServerRequest::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& OTServerRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerRequest.keys)
  return _internal_keys(index);
}
inline std::string* OTServerRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServerRequest.keys)
  return keys_.Mutable(index);
}
inline void OTServerRequest::set_keys(int index, const std::string& value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:otServicePB.OTServerRequest.keys)
}
inline void OTServerRequest::set_keys(int index, std::string&& value) {
  keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:otServicePB.OTServerRequest.keys)
}
inline void OTServerRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:otServicePB.OTServerRequest.keys)
}
inline void OTServerRequest::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:otServicePB.OTServerRequest.keys)
}
inline std::string* OTServerRequest::_internal_add_keys() {
  return keys_.Add();
}
inline void OTServerRequest::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:otServicePB.OTServerRequest.keys)
}
inline void OTServerRequest::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:otServicePB.OTServerRequest.keys)
}
inline void OTServerRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:otServicePB.OTServerRequest.keys)
}
inline void OTServerRequest::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:otServicePB.OTServerRequest.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OTServerRequest::keys() const {
  // @@protoc_insertion_point(field_list:otServicePB.OTServerRequest.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OTServerRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:otServicePB.OTServerRequest.keys)
  return &keys_;
}

// repeated .otServicePB.Bytes bytes = 5;
inline int OTServerRequest::_internal_bytes_size() const {
  return bytes_.size();
}
inline int OTServerRequest::bytes_size() const {
  return _internal_bytes_size();
}
inline void OTServerRequest::clear_bytes() {
  bytes_.Clear();
}
inline ::otServicePB::Bytes* OTServerRequest::mutable_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServerRequest.bytes)
  return bytes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::Bytes >*
OTServerRequest::mutable_bytes() {
  // @@protoc_insertion_point(field_mutable_list:otServicePB.OTServerRequest.bytes)
  return &bytes_;
}
inline const ::otServicePB::Bytes& OTServerRequest::_internal_bytes(int index) const {
  return bytes_.Get(index);
}
inline const ::otServicePB::Bytes& OTServerRequest::bytes(int index) const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerRequest.bytes)
  return _internal_bytes(index);
}
inline ::otServicePB::Bytes* OTServerRequest::_internal_add_bytes() {
  return bytes_.Add();
}
inline ::otServicePB::Bytes* OTServerRequest::add_bytes() {
  ::otServicePB::Bytes* _add = _internal_add_bytes();
  // @@protoc_insertion_point(field_add:otServicePB.OTServerRequest.bytes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::Bytes >&
OTServerRequest::bytes() const {
  // @@protoc_insertion_point(field_list:otServicePB.OTServerRequest.bytes)
  return bytes_;
}

// -------------------------------------------------------------------

// OTServerResponse

// string function = 1;
inline void OTServerResponse::clear_function() {
  function_.ClearToEmpty();
}
inline const std::string& OTServerResponse::function() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerResponse.function)
  return _internal_function();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OTServerResponse::set_function(ArgT0&& arg0, ArgT... args) {
 
 function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.OTServerResponse.function)
}
inline std::string* OTServerResponse::mutable_function() {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServerResponse.function)
  return _s;
}
inline const std::string& OTServerResponse::_internal_function() const {
  return function_.Get();
}
inline void OTServerResponse::_internal_set_function(const std::string& value) {
  
  function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OTServerResponse::_internal_mutable_function() {
  
  return function_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OTServerResponse::release_function() {
  // @@protoc_insertion_point(field_release:otServicePB.OTServerResponse.function)
  return function_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OTServerResponse::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    
  } else {
    
  }
  function_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTServerResponse.function)
}

// repeated string values = 2;
inline int OTServerResponse::_internal_values_size() const {
  return values_.size();
}
inline int OTServerResponse::values_size() const {
  return _internal_values_size();
}
inline void OTServerResponse::clear_values() {
  values_.Clear();
}
inline std::string* OTServerResponse::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:otServicePB.OTServerResponse.values)
  return _s;
}
inline const std::string& OTServerResponse::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& OTServerResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerResponse.values)
  return _internal_values(index);
}
inline std::string* OTServerResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServerResponse.values)
  return values_.Mutable(index);
}
inline void OTServerResponse::set_values(int index, const std::string& value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:otServicePB.OTServerResponse.values)
}
inline void OTServerResponse::set_values(int index, std::string&& value) {
  values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:otServicePB.OTServerResponse.values)
}
inline void OTServerResponse::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:otServicePB.OTServerResponse.values)
}
inline void OTServerResponse::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:otServicePB.OTServerResponse.values)
}
inline std::string* OTServerResponse::_internal_add_values() {
  return values_.Add();
}
inline void OTServerResponse::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:otServicePB.OTServerResponse.values)
}
inline void OTServerResponse::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:otServicePB.OTServerResponse.values)
}
inline void OTServerResponse::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:otServicePB.OTServerResponse.values)
}
inline void OTServerResponse::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:otServicePB.OTServerResponse.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OTServerResponse::values() const {
  // @@protoc_insertion_point(field_list:otServicePB.OTServerResponse.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OTServerResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:otServicePB.OTServerResponse.values)
  return &values_;
}

// repeated .otServicePB.Bytes bytes = 3;
inline int OTServerResponse::_internal_bytes_size() const {
  return bytes_.size();
}
inline int OTServerResponse::bytes_size() const {
  return _internal_bytes_size();
}
inline void OTServerResponse::clear_bytes() {
  bytes_.Clear();
}
inline ::otServicePB::Bytes* OTServerResponse::mutable_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServerResponse.bytes)
  return bytes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::Bytes >*
OTServerResponse::mutable_bytes() {
  // @@protoc_insertion_point(field_mutable_list:otServicePB.OTServerResponse.bytes)
  return &bytes_;
}
inline const ::otServicePB::Bytes& OTServerResponse::_internal_bytes(int index) const {
  return bytes_.Get(index);
}
inline const ::otServicePB::Bytes& OTServerResponse::bytes(int index) const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerResponse.bytes)
  return _internal_bytes(index);
}
inline ::otServicePB::Bytes* OTServerResponse::_internal_add_bytes() {
  return bytes_.Add();
}
inline ::otServicePB::Bytes* OTServerResponse::add_bytes() {
  ::otServicePB::Bytes* _add = _internal_add_bytes();
  // @@protoc_insertion_point(field_add:otServicePB.OTServerResponse.bytes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::Bytes >&
OTServerResponse::bytes() const {
  // @@protoc_insertion_point(field_list:otServicePB.OTServerResponse.bytes)
  return bytes_;
}

// -------------------------------------------------------------------

// OTServerResponseWrapper

// .otServicePB.Error error = 1;
inline bool OTServerResponseWrapper::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool OTServerResponseWrapper::has_error() const {
  return _internal_has_error();
}
inline void OTServerResponseWrapper::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::otServicePB::Error& OTServerResponseWrapper::_internal_error() const {
  const ::otServicePB::Error* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::otServicePB::Error&>(
      ::otServicePB::_Error_default_instance_);
}
inline const ::otServicePB::Error& OTServerResponseWrapper::error() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerResponseWrapper.error)
  return _internal_error();
}
inline void OTServerResponseWrapper::unsafe_arena_set_allocated_error(
    ::otServicePB::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:otServicePB.OTServerResponseWrapper.error)
}
inline ::otServicePB::Error* OTServerResponseWrapper::release_error() {
  
  ::otServicePB::Error* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::otServicePB::Error* OTServerResponseWrapper::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:otServicePB.OTServerResponseWrapper.error)
  
  ::otServicePB::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::otServicePB::Error* OTServerResponseWrapper::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::otServicePB::Error>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::otServicePB::Error* OTServerResponseWrapper::mutable_error() {
  ::otServicePB::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServerResponseWrapper.error)
  return _msg;
}
inline void OTServerResponseWrapper::set_allocated_error(::otServicePB::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::otServicePB::Error>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTServerResponseWrapper.error)
}

// .otServicePB.OTServerResponse result = 2;
inline bool OTServerResponseWrapper::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool OTServerResponseWrapper::has_result() const {
  return _internal_has_result();
}
inline void OTServerResponseWrapper::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::otServicePB::OTServerResponse& OTServerResponseWrapper::_internal_result() const {
  const ::otServicePB::OTServerResponse* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::otServicePB::OTServerResponse&>(
      ::otServicePB::_OTServerResponse_default_instance_);
}
inline const ::otServicePB::OTServerResponse& OTServerResponseWrapper::result() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTServerResponseWrapper.result)
  return _internal_result();
}
inline void OTServerResponseWrapper::unsafe_arena_set_allocated_result(
    ::otServicePB::OTServerResponse* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:otServicePB.OTServerResponseWrapper.result)
}
inline ::otServicePB::OTServerResponse* OTServerResponseWrapper::release_result() {
  
  ::otServicePB::OTServerResponse* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::otServicePB::OTServerResponse* OTServerResponseWrapper::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:otServicePB.OTServerResponseWrapper.result)
  
  ::otServicePB::OTServerResponse* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::otServicePB::OTServerResponse* OTServerResponseWrapper::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::otServicePB::OTServerResponse>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::otServicePB::OTServerResponse* OTServerResponseWrapper::mutable_result() {
  ::otServicePB::OTServerResponse* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTServerResponseWrapper.result)
  return _msg;
}
inline void OTServerResponseWrapper::set_allocated_result(::otServicePB::OTServerResponse* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::otServicePB::OTServerResponse>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTServerResponseWrapper.result)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OTClientRequest

// string function = 1;
inline void OTClientRequest::clear_function() {
  function_.ClearToEmpty();
}
inline const std::string& OTClientRequest::function() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTClientRequest.function)
  return _internal_function();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OTClientRequest::set_function(ArgT0&& arg0, ArgT... args) {
 
 function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.OTClientRequest.function)
}
inline std::string* OTClientRequest::mutable_function() {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTClientRequest.function)
  return _s;
}
inline const std::string& OTClientRequest::_internal_function() const {
  return function_.Get();
}
inline void OTClientRequest::_internal_set_function(const std::string& value) {
  
  function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OTClientRequest::_internal_mutable_function() {
  
  return function_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OTClientRequest::release_function() {
  // @@protoc_insertion_point(field_release:otServicePB.OTClientRequest.function)
  return function_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OTClientRequest::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    
  } else {
    
  }
  function_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTClientRequest.function)
}

// map<uint32, uint32> uinWithLabelMap = 2;
inline int OTClientRequest::_internal_uinwithlabelmap_size() const {
  return uinwithlabelmap_.size();
}
inline int OTClientRequest::uinwithlabelmap_size() const {
  return _internal_uinwithlabelmap_size();
}
inline void OTClientRequest::clear_uinwithlabelmap() {
  uinwithlabelmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
OTClientRequest::_internal_uinwithlabelmap() const {
  return uinwithlabelmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
OTClientRequest::uinwithlabelmap() const {
  // @@protoc_insertion_point(field_map:otServicePB.OTClientRequest.uinWithLabelMap)
  return _internal_uinwithlabelmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
OTClientRequest::_internal_mutable_uinwithlabelmap() {
  return uinwithlabelmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
OTClientRequest::mutable_uinwithlabelmap() {
  // @@protoc_insertion_point(field_mutable_map:otServicePB.OTClientRequest.uinWithLabelMap)
  return _internal_mutable_uinwithlabelmap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Fields

// map<string, string> msg = 1;
inline int Fields::_internal_msg_size() const {
  return msg_.size();
}
inline int Fields::msg_size() const {
  return _internal_msg_size();
}
inline void Fields::clear_msg() {
  msg_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Fields::_internal_msg() const {
  return msg_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Fields::msg() const {
  // @@protoc_insertion_point(field_map:otServicePB.Fields.msg)
  return _internal_msg();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Fields::_internal_mutable_msg() {
  return msg_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Fields::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_map:otServicePB.Fields.msg)
  return _internal_mutable_msg();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OTClientResponse

// string function = 1;
inline void OTClientResponse::clear_function() {
  function_.ClearToEmpty();
}
inline const std::string& OTClientResponse::function() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTClientResponse.function)
  return _internal_function();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OTClientResponse::set_function(ArgT0&& arg0, ArgT... args) {
 
 function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:otServicePB.OTClientResponse.function)
}
inline std::string* OTClientResponse::mutable_function() {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTClientResponse.function)
  return _s;
}
inline const std::string& OTClientResponse::_internal_function() const {
  return function_.Get();
}
inline void OTClientResponse::_internal_set_function(const std::string& value) {
  
  function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OTClientResponse::_internal_mutable_function() {
  
  return function_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OTClientResponse::release_function() {
  // @@protoc_insertion_point(field_release:otServicePB.OTClientResponse.function)
  return function_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OTClientResponse::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    
  } else {
    
  }
  function_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTClientResponse.function)
}

// float reqTimeMillis = 2;
inline void OTClientResponse::clear_reqtimemillis() {
  reqtimemillis_ = 0;
}
inline float OTClientResponse::_internal_reqtimemillis() const {
  return reqtimemillis_;
}
inline float OTClientResponse::reqtimemillis() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTClientResponse.reqTimeMillis)
  return _internal_reqtimemillis();
}
inline void OTClientResponse::_internal_set_reqtimemillis(float value) {
  
  reqtimemillis_ = value;
}
inline void OTClientResponse::set_reqtimemillis(float value) {
  _internal_set_reqtimemillis(value);
  // @@protoc_insertion_point(field_set:otServicePB.OTClientResponse.reqTimeMillis)
}

// map<string, string> resMap = 3;
inline int OTClientResponse::_internal_resmap_size() const {
  return resmap_.size();
}
inline int OTClientResponse::resmap_size() const {
  return _internal_resmap_size();
}
inline void OTClientResponse::clear_resmap() {
  resmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
OTClientResponse::_internal_resmap() const {
  return resmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
OTClientResponse::resmap() const {
  // @@protoc_insertion_point(field_map:otServicePB.OTClientResponse.resMap)
  return _internal_resmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
OTClientResponse::_internal_mutable_resmap() {
  return resmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
OTClientResponse::mutable_resmap() {
  // @@protoc_insertion_point(field_mutable_map:otServicePB.OTClientResponse.resMap)
  return _internal_mutable_resmap();
}

// -------------------------------------------------------------------

// OTClientResponseWrapper

// .otServicePB.Error error = 1;
inline bool OTClientResponseWrapper::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool OTClientResponseWrapper::has_error() const {
  return _internal_has_error();
}
inline void OTClientResponseWrapper::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::otServicePB::Error& OTClientResponseWrapper::_internal_error() const {
  const ::otServicePB::Error* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::otServicePB::Error&>(
      ::otServicePB::_Error_default_instance_);
}
inline const ::otServicePB::Error& OTClientResponseWrapper::error() const {
  // @@protoc_insertion_point(field_get:otServicePB.OTClientResponseWrapper.error)
  return _internal_error();
}
inline void OTClientResponseWrapper::unsafe_arena_set_allocated_error(
    ::otServicePB::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:otServicePB.OTClientResponseWrapper.error)
}
inline ::otServicePB::Error* OTClientResponseWrapper::release_error() {
  
  ::otServicePB::Error* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::otServicePB::Error* OTClientResponseWrapper::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:otServicePB.OTClientResponseWrapper.error)
  
  ::otServicePB::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::otServicePB::Error* OTClientResponseWrapper::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::otServicePB::Error>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::otServicePB::Error* OTClientResponseWrapper::mutable_error() {
  ::otServicePB::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:otServicePB.OTClientResponseWrapper.error)
  return _msg;
}
inline void OTClientResponseWrapper::set_allocated_error(::otServicePB::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::otServicePB::Error>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:otServicePB.OTClientResponseWrapper.error)
}

// repeated .otServicePB.OTClientResponse result = 2;
inline int OTClientResponseWrapper::_internal_result_size() const {
  return result_.size();
}
inline int OTClientResponseWrapper::result_size() const {
  return _internal_result_size();
}
inline void OTClientResponseWrapper::clear_result() {
  result_.Clear();
}
inline ::otServicePB::OTClientResponse* OTClientResponseWrapper::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:otServicePB.OTClientResponseWrapper.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::OTClientResponse >*
OTClientResponseWrapper::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:otServicePB.OTClientResponseWrapper.result)
  return &result_;
}
inline const ::otServicePB::OTClientResponse& OTClientResponseWrapper::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::otServicePB::OTClientResponse& OTClientResponseWrapper::result(int index) const {
  // @@protoc_insertion_point(field_get:otServicePB.OTClientResponseWrapper.result)
  return _internal_result(index);
}
inline ::otServicePB::OTClientResponse* OTClientResponseWrapper::_internal_add_result() {
  return result_.Add();
}
inline ::otServicePB::OTClientResponse* OTClientResponseWrapper::add_result() {
  ::otServicePB::OTClientResponse* _add = _internal_add_result();
  // @@protoc_insertion_point(field_add:otServicePB.OTClientResponseWrapper.result)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::otServicePB::OTClientResponse >&
OTClientResponseWrapper::result() const {
  // @@protoc_insertion_point(field_list:otServicePB.OTClientResponseWrapper.result)
  return result_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace otServicePB

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mmdcotservicehttpbroker_2eproto
